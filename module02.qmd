# Module 2: Determining LULC Classification Schema and Classes {#sec-module-2}

# Module Overview {.unnumbered}

A key feature of this module is its adaptability: users can generate maps with customizable classification schemes, from broad outputs like deforestation maps to detailed products reflecting specific management practices or prioritized classes for greater accuracy. This flexibility aligns with the FAO [LCCS](https://www.fao.org/4/x0596e/x0596e00.htm), supporting class combinations and hierarchical structures. The output of this module is a well-defined list of LULC classes, structured either hierarchically, with multiple levels of thematic detail where broader classes like Natural Forest or Agroforestry are subdivided into finer subclasses for analysis at different scales, or non-hierarchically, where all classes are treated independently, suitable for single-level applications such as deforestation mapping or identifying priority conservation areas.

# Input {.unnumbered}

**User’s Input**

1.  Selection of a classification schema.
2.  User-defined list of LULC classes.
3.  User-provided prompt for Artificial Intelligent (AI).

**Automatic System Input**

1.  FAO LULC classes.
2.  RESTORE+ LULC classes.

**Input from Other Module**

1.  User-selected AOI (@sec-selection-of-aoi).
2.  Near-cloud-free satellite imagery (@sec-satellite-imagery-post-processing).

# Output {.unnumbered}

LULC classification table

# Process {.unnumbered}

```{mermaid}
flowchart TD

A([<a href="#classification-schema-selection">Classification Schema Selection</a>])
B([<a href="#sec-hierarchical-classification-schema">Hierarchical Classification Schema</a>])
C([<a href="#sec-non-hierarchical-classification-schema">Non-Hierarchical Classification Schema</a>])
D([<a href="#ai-generated-lulc-classification-recommendation">AI-Generated LULC Classification Recommendation</a>])
E([<a href="#validation-of-input-data">Validation of Input Data</a>])
F([<a href="#sec-saving-the-lulc-classification-table">Saving the LULC Classification Table</a>])

%% Flow connections
A -->|Hierarchical| B
A -->|Non-Hierarchical| C

B --> D
C --> D

D --> E
E -->|Valid| F
E -->|Invalid| A

```

## Selection of Classification Scheme and LULC Input Method

### Classification Schema Selection

**Front-end**

The user selects either a hierarchical or non-hierarchical classification schema.

**Back-end**

1.  If the user choose hierarchical schema, the system proceeds to @sec-hierarchical-classification-schema\
2.  If the user choose non-hierarchical schema, the system proceeds to @sec-non-hierarchical-classification-schema

### Hierarchical Classification Schema {#sec-hierarchical-classification-schema}

**Front-end**

The user fills in four columns: ID, Level, Class Name, and Color Code, with a hierarchical User Interface (UI) form to simplify creating multi-level class structures.

**Back-end**

The system provides an "Add Class", "Edit Class", "Delete Class" options that accepts the user's input and stores it as variables.

### Non-Hierarchical Classification Schema {#sec-non-hierarchical-classification-schema}

**Front-end**

The user fills in three columns: ID, Class Name, and Color Code.

**Back-end**

The system provides an "Add Class", "Edit Class", "Delete Class" options that accepts the user's input and stores it as variables.

### AI-Generated LULC Classification Recommendations

**Front-end**

The user can choose to create an AI prompt to generate potential LULC classes.

**Back-end**

## Validation of Input Data

### Validation of Input Data

**Front-end**

The user will be alerted with clear instructions if any errors are detected.

**Back-end**

The system validates the user’s input for completeness and correctness. If errors or missing inputs are detected, the system generates specific notifications for the user’s guidance. If the data is valid, the process proceeds to @sec-saving-the-lulc-classification-table.

## Visualizing, Downloading, and Saving the LULC Classification Table {#sec-saving-the-lulc-classification-table}

### Visualizing, Downloading, and Saving the LULC Classification Table

**Front-end**

1.  The table is displayed in a tabular format.
2.  The user can download the table in `.CSV` file.
3.  Next, the user receives a confirmation and can proceed to the next step.

**Back-end**

1.  The system display the table in Pandas DataFrame and serves it to the front-end, along with a Download option.
2.  The system validates the table for completeness (ensuring it contains at least one class) and correctness.
3.  Once validated, the classification table is saved as a variable for use in subsequent modules.

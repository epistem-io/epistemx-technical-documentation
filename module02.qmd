# Module 2: Determining LULC Classification Schema and Classes {#sec-module-2}

# Module overview {.unnumbered}

A key feature of this module is its adaptability: users can generate maps with customizable classification schemes, from broad outputs like deforestation maps to detailed products reflecting specific management practices or prioritized classes for greater accuracy. This flexibility aligns with the FAO [LCCS](https://www.fao.org/4/x0596e/x0596e00.htm), supporting class combinations and hierarchical structures. The output of this module is a well-defined list of LULC classes, structured either hierarchically, with multiple levels of thematic detail where broader classes like Natural Forest or Agroforestry are subdivided into finer subclasses for analysis at different scales, or non-hierarchically, where all classes are treated independently, suitable for single-level applications such as deforestation mapping or identifying priority conservation areas.

# Input {.unnumbered}

**User’s Input**

-   Selection of a classification schema
-   User-defined list of LULC classes
-   User-provided prompt for Artificial Intelligent (AI)

**Input from External Sources**

-   FAO LULC classes
-   RESTORE+ LULC classes

**Input from Other Module**

-   User-selected AOI (@sec-selection-of-aoi)
-   Near cloud-free satellite imagery (@sec-satellite-imagery-post-processing)

# Output {.unnumbered}

-   LULC classification table

# Process {.unnumbered}

## Selection of Classification Scheme and LULC Input Method

### Classification schema selection

#### Front-end

The user selects either a hierarchical or non-hierarchical classification schema (either @sec-hierarchical-classification-schema or @sec-non-hierarchical-classification-schema)

#### Back-end

The system will continue to proceed accordingly to the user’s classification choice schema

::: callout-note
@sec-hierarchical-classification-schema and @sec-non-hierarchical-classification-schema are options
:::

### Hierarchical classification schema {#sec-hierarchical-classification-schema}

**Front-end**

User fills in four columns: ID, Level, Class Name, and Colour, with a hierarchical User Interface (UI) form to simplify creating of multi-level class structures

**Back-end**

The system receives user’s input and save it as a variable

### Non-hierarchical classification schema {#sec-non-hierarchical-classification-schema}

#### Front-end

User fills in four columns: ID, Level, Class Name, and Colour

#### Back-end

The system receives user’s input and save it as a variable

### AI-generated LULC classification recommendation

#### Front-end

User can choose to create an AI prompt to generate potential LULC classes

#### Back-end

??

## Validation of Input Data

### Validation of input data

#### Front-end

User will be alerted with clear instructions if any errors are detected

#### Back-end

The system validates the user’s input for completeness and correctness. If errors or missing inputs are detected, the system generates specific notifications user’s guidance. If the data is valid, the process proceeds to @sec-saving-the-lulc-classification-table.

## Saving the LULC Classification Table {#sec-saving-the-lulc-classification-table}

### Saving the LULC Classification Table

#### Front-end

-   User will receive a confirmation and can proceed to the next step.

#### Back-end

-   Once validated, the system saves the classification table as a variable for use in subsequent modules.

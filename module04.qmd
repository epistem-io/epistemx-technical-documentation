# Module 4: Spectral Separability Analysis {#sec-module-4}

# Module Overview {.unnumbered}

This module performs a spectral separability analysis to assess the distinctiveness of land cover classes. Conducting separability analysis is essential to ensure that the spectral signatures of training samples are sufficiently differentiated; inadequate separability between classes can lead to model confusion, increased classification error, and reduced generalization performance.

The module extracts spectral pixel values from near-cloud-free satellite imagery and computes key descriptive statistics for each class. To maintain computational efficiency and minimize class imbalance, sampling is constrained to a defined maximum number of pixels per class. Pairwise separability is then quantified using the Jeffries–Matusita (JM) and Transformed Divergence (TD) metrics, both of which evaluate the statistical distance between class distributions based on their means and covariance matrices. The resulting separability values are categorized to indicate good, marginal, or poor class distinction and visualized through histograms, box plots, and scatter plots. This diagnostic process enables the identification of spectrally overlapping classes that require refinement or redefinition before classification, thereby improving the reliability and accuracy of subsequent LULC mapping workflows.

# Input {.unnumbered}

**User's Input**

1.  Separability analysis parameters.
2.  User-specified spectral bands for visualization.

**Input from Other Modules**

1.  Near-cloud-free satellite imagery within the AOI (@sec-satellite-imagery-post-processing).
2.  Training Data (@sec-module-3).

# Output {.unnumbered}

<!-- 1.  Basic statistics (mean, median, variance, and standard deviation). -->

1.  Separability analysis result in diagram visualization and text description.

# Process {.unnumbered}

```{mermaid}
flowchart TD

%% Main entry
A([<a href="#sec-specification-of-separability-analysis-parameters">Specification of Separability Analysis Parameters</a>])
B[/Methodology/]
C[/ID and Class Name/]
D[/Pixel Size/]
E([<a href="#sec-reviewing-separability-results">Reviewing Separability Results</a>])
F[\Separability Analysis\]
G[\Sample Stat. Calculation\]
H([<a href="#sec-spectral-profile-visualization">Spectral Profile Visualization</a>])

%% Flow connections
A --> B
A --> C
A --> D

B --> E
C --> E
D --> E

E --> F
E --> G

F --> H
G --> H

F -->|Error|A
G -->|Error|A


```

## Spectral Feature Sampling {#sec-spectral-feature-sampling}

### Spectral Feature Sampling

**Back-end**

1.  The system extracts spectral (pixel) values from near-cloud-free satellite imagery ([Module 1](@sec-module-01)) using all data in the `TrainDataFinal` set ([Module 3](@sec-module-3)) at a 30 m spatial resolution. To prevent memory overload, timeouts, or class imbalance, a maximum of 7,000 pixels per land cover class (`max_pixel_per_class`) is extracted.

::: callout-tip
## Related Function(s)

`extract_spectral_values()` to extract the pixels of all training samples.
:::

2.  The system ensures that no class exceeds this limit. For each class, the system first filters the training data to select samples of that class and then counts the number of samples. If the count exceeds `max_pixels_per_class`, a random subset up to the limit is selected; otherwise, all samples are used.

::: callout-tip
## Related Function(s)

`limit_sample_per_class()` to limit the number of training samples per class.
:::

3.  Next, after pixel extraction, the system computes and summarizes the pixel-level data for each spectral band and class, including the mean, standard deviation, minimum, maximum, median, and count, and formats it into a structured DataFrame suitable for the subsequent separability analysis.

::: callout-tip
## Related Function(s)

`sample_pixel_stats()` to compute summary statistics.

`get_sample_pixel_stats_df()` to `convert sample_pixel_stats()` into pandas DataFrame.
:::

## Specification of Separability Analysis Parameters

### Specification of Separability Analysis Parameters

**Front-end**

1.  The user defines the parameters and selects the method for separability analysis.
2.  Inputs include ID, Class Name, and pixel size.

**Back-end**

The system provides three parameters:

1.  Methodology: Jeffries-Matusita or Transformed Divergence.
2.  ID and Class Name as a drop down selection.
3.  Pixel Size as numeric input.

## Computing the Separability Analysis {#sec-computing-the-separability-analysis}

### Computing the Separability Analysis

**Back-end**

1.  The system first generates all possible class pairs in the dataset, since separability metrics like JM or TD are defined for two classes at a time. It then creates a matrix to store the separability value for each class pair.

::: callout-tip
## Related Function(s)

`check_class_separability()` to compute pairwise class separability.
:::

2.  The system runs the separability analysis. Both methods TM and TD take the spectral pixel data of two classes and calculate how distinct they are based on their means and covariance matrices. The resulting values range from 0 (no separability) to 2 (perfect separability).

::: callout-tip
## Related Function(s)

`_jeffries_matusita_distance()` to compute separability value with JM method.

`transform_divergence()` to compute separability value with TD method.
:::

3.  Finally, the result matrix is converted into a readable, cleaned, long-format pandas DataFrame.

::: callout-tip
## Related Function(s)

`get_separability_df()` to convert `check_class_separability()` into pandas DataFrame.
:::

4.  The system provides a function to filter and highlight the class pairs that are most difficult to distinguish, based on their separability values.

::: callout-tip
## Related Function(s)

`lowest_separability()` to identify the N class with the lowest values.
:::

5.  The separability values are assigned to a categorical level indicating how well two classes can be separated. The system groups the numeric values into these categories.

    -   Good separability (\>1.8): Classes are well separated.
    -   Weak/Marginal separability (1.0-1.8): Classes overlap partially.
    -   Class confusion (\<1.0): Classes require improvement.

::: callout-tip
## Related Function(s)

`separability_level()` to interpret separability metric values to three categories.
:::

6.  The system summarizes the number of class pairs in each category to provide an overall view of class separability.

::: callout-tip
## Related Function(s)

`sum_separability()` to count the number pf class pairs in each category.
:::

7.  Results, along with the basic statistics table, are exported as a `.TXT` report.
8.  Detailed error messages are provided if any errors occur.

## Reviewing Separability Results {#sec-reviewing-separability-results}

### Reviewing Separability Result {#sec-selection-of-lulc-classification-model}

**Front-end**

1.  If input parameters are incomplete, the user receives an error message.
2.  If inputs are complete, the user evaluates whether the separability results are satisfactory.
    -   If unsatisfactory, the user may refine samples for classes with low separability by adding or removing points through [Module 3](@sec-module3) or external editing.
    -   If satisfactory, the user may proceed to spectral profile visualization (@sec-spectral-profile-visualization) .

**Back-end**

1.  The system validates input parameters and prompts the user to review any incomplete entries.

2.  If it is incomplete, the system displays an error and prompts the user to review the analysis parameters.

## Spectral Profile Visualization {#sec-spectral-profile-visualization}

### Spectral Profile Visualization {#sec-spectra-signature-visualization}

**Front-end**

The user selects the spectral bands for visualization. This allows the user to evaluate whether the spectral data and class separability are satisfactory:

-   If satisfied with the result, the user proceed to the next module.

-   If not satisfied, the user can return to [Module 3](@sec-module-3) to modify the `TrainDataFinal`.

**Back-end**

1.  The system checks the status of the separability analysis:

    -   If successful, visualization proceeds.
    -   If unsuccessful, visualization is blocked and the user is prompted to complete the parameter specification (@sec-specification-of-separability-analysis-parameters).

2.  A visualization canvas and the required Python libraries are provided to support the visualization of results and spectral data distribution through:

    -   Histogram

        Histogram visualizes the distribution of pixel values for selected spectral bands, separated by class. It reveals overlap or separation between classes visually.

        -   The system checks if the DataFrame has data; if not, it stops.

        -   If the user doesn’t specify which bands to plot, it automatically selects the first few bands (max_bands=3).

        -   For each selected band, it creates faceted histograms, where each class appears in a separate subplot (facet).

        -   This helps the user see how pixel value distributions differ between classes for each spectral band.

        ::: callout-tip
        ## Related Function(s)

        `plot_facet_histograms()` to plot histogram of the bands.
        :::

    -   Box plot

        Box plot displays pixel values distributions for each spectral band across all classes. It shows the range, median, and variability of spectral values per class, helping identify overlaps.

        -   The system checks that data exists; otherwise, exits.

        -   It selects the spectral bands to plot (either user-defined or the first few).

        -   For each band, it creates a boxplot where: The x-axis shows class IDs and the y-axis shows pixel values for that band.

        -   It rotates class labels for readability (useful when there are many classes).

        ::: callout-tip
        ## Related Function(s)

        `plot_boxplots_by_band()` to plot boxplots of the bands.
        :::

    -   Scatter plot (2D and 3D)

3.  Helper Text guides the user in interpreting the plots effectively.

4.  The system summarize a comprehensive textual summary of the separability results. The system calls `sum_separability()` and `lowest_separability()` and displays key statistics and interpretations in a readable table format.

::: callout-tip
## Related Function(s)

`print_analysis_summary()` to summarize the result.
:::
